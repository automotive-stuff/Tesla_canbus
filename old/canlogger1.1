#!/usr/bin/python3
# Second script, print all data for debug purpose.


#Main import.
import sys
import glob
import time, datetime
import io
import os
import can



#Some settings to make life easier.
SHOW_POWER_DATA = True
SHOW_BATTERY_DATA = True
SHOW_DCDC_DATA = True

# Constants
KWH = ' kWh'
KILOMETER = ' Kilometer'
PCT = ' %'
VOLTS = ' volts'
AMPS = ' amps'
TEMP = ' Celsius'


#Get can0 up and running.
os.system("sudo /sbin/ip link set can0 up type can bitrate 500000")
time.sleep(0.1)
dev = can.interface.Bus(channel='can0', bustype='socketcan_native')

print("Waiting for CanBus traffic.")
#Main loop.
try:
    while True:
        message = dev.recv()
        if SHOW_BATTERY_DATA == True:
        #ID 102, Battery management system BMS.
            def batteryvoltage():
                return (message.data[1] * 256 + message.data[0]) / 100.
            def regencurrent():
                return (message.data[3] & 0x100000) * message.data[3] * 256 + message.data[2]
            def bmstemp():
                return ((message.data[6] + (message.data[7] & 0x07) << 8)) * 0.1
            if message.arbitration_id == 258:
                print("batteryVoltage V: " + str(batteryvoltage()))
                print("regenCurrent A: " + str(regencurrent()))
                print("temp C: " +str(bmstemp()))
            #ID 232, Power limits
            def maxdischargepower():
                return (message.data[2] + (message.data[3] << 8)) / 100.
            def maxregenpower():
                return (message.data[0] + (message.data[1] << 8)) / 100.
            if message.arbitration_id == 562:
                print("Max Discharge Power kW: " +str(maxdischargepower()))
                print("Max Regen Power kW: " + str(maxregenpower()))
            #ID 3D2, Total charge
            def kwhchargetotal():
                return (message.data[4] + (message.data[5] << 8) + (message.data[6] << 16) + (message.data[7] << 24)) / 1000.0
            def kwhdischargetotal():
                return (message.data[0] + (message.data[1] << 8) + (message.data[2] << 16) + (message.data[3] << 24)) / 1000.0
            if message.arbitration_id == 978:
                print("kWh Charge Total: " + str(kwhchargetotal()))
                print("kWh Discharge Total: " + str(kwhdischargetotal()))
            #ID 302 Battery Charge State
            def socmin():
                return (message.data[0] + ((message.data[1] & 0x3) << 8)) / 10.
            def socui():
                return ((message.data[1] >> 2) + ((message.data[2] & 0xf) << 6)) / 10.
            if message.arbitration_id == 770:
                print("State of Charge Min: " + str(socmin()))
                print("State of Charge UI: " + str(socui()))
            #ID 382 Battery statistics
            def nominalFullPackEnergy():
                return (message.data[0] + ((message.data[1] & 0x3) << 8)) / 10.0
            def nominalEnergyRemaining():
                return ((message.data[1] >> 2) + ((message.data[2] & 0xf) * 64)) / 10.
            def expectedEnergyRemaining():
                return ((message.data[2] >> 4) + ((message.data[3] & 0x3f) * 16)) / 10.
            def idealEnergyRemaining():
                return ((message.data[3] >> 6) + ((message.data[4] & 0xff) * 4)) / 10.
            def energyBuffer():
                return ((message.data[6] >> 2) + ((message.data[7] & 0x03) * 64)) / 10.
            def energyToChargeComplete():
                return (message.data[5] + ((message.data[6] & 0x03) << 8)) / 10.
            if message.arbitration_id == 898:
                print("NominalFullPackEnergy kWh: " + str(nominalFullPackEnergy()))
                print("NominalEneryRemaining kWh: " + str(nominalEnergyRemaining()))
                print("ExpectedEneryRemaining kWh: " + str(expectedEnergyRemaining()))
                print("IdealEneryRemaining kWh: " + str(idealEnergyRemaining()))
                print("EnergyBuffer kWh: " + str(energyBuffer()))
                print("EnergyToChargeComplete kWh: " + str(energyToChargeComplete()))


        if SHOW_POWER_DATA == True:
            #ID 106 Rear motor RPM
            def reardumotorrpm():
                return (message.data[4] + (message.data[5] << 8)) - (512 * (message.data[5] & 0x80))
            def reardupedalpos():
                return message.data[6] * 0.4
            if message.arbitration_id == 262:
                print("Rearmotor RPM: " + str(reardumotorrpm()))
                print("Pedalpos : " + str(reardupedalpos()))

            #ID 154 Rear DU more info
            def reardutorquemeassured():
                return (message.data[5] + ((message.data[6] & 0x1f) << 8) - (512 * (message.data[6] & 0x10))) / 4
            def reardupedalposa():
                return message.data[2] * 0.4
            def reardupedalposb():
                return message.data[3] * 0.4
            if message.arbitration_id == 340:
                print("Rear DU Torque Meassured NM: " + str(reardutorquemeassured()))
                print("Pedalpos A: " + str(reardupedalposa()))
                print("Pedalpos B: " + str(reardupedalposb()))

            #ID 266 Rear Du Power statistics.
            def rearinverter12V():
                return message.data[0] / 10.
            def reardudissipation():
                return message.data[1] * 125
            def reardudrivepowermax():
                return (((message.data[6] & 0x3F) << 5) + ((message.data[5] & 0xF0) >> 3)) + 1
            def reardumechpower():
                return ((message.data[2] + ((message.data[3] & 0x7) << 8)) - (512 * (message.data[3] & 0x4))) / 2.
            def reardustatorcurrent():
                return message.data[4] + ((message.data[5] & 0x7) << 8)
            def rearduregenpowermax():
                return (message.data[7] * 4) - 200
            if message.arbitration_id == 614:
                print("RearDu Inverter 12V V: " + str(rearinverter12V()))
                print("RearDU Dissipation W: " + str(reardudissipation()))
                print("RearDU DrivePower Max kW: " + str(reardudrivepowermax()))
                print("RearDu MechPower kW: " + str(reardumechpower()))
                print("RearDu Stator Current A: " + str(reardustatorcurrent()))
                print("RearDu regen power max kW: " +str(rearduregenpowermax()))

            #ID 116 Rear DU Torque Status
            def reardugear():
                return (message.data[1] & 0x70) >> 4
            def reardugearrequest():
                return (message.data[3] & 0x70) >> 4
            def reardutorqueestimate():
                return ((message.data[0] + ((message.data[1] & 0xF) << 8)) - (512 * (message.data[1] & 0x8))) / 2
            def rearduvehiclespeed():
                return (((message.data[2] + ((message.data[3] & 0xf) << 8)) - 500) / 20)
            if message.arbitration_id == 278:
                print("RearDu Gear : " + str(reardugear()))
                print("RearDu Gear Request : " + str(reardugearrequest()))
                print("RearDu Torque Estimate Nm : " + str(reardutorqueestimate()))
                print("RearDu Vehicle speed : " + str(rearduvehiclespeed()))

            #ID 1D4 Front Du Torque
            def frontdutorquemeassured():
                return ((message.data[0] + ((message.data[1] & 0xf) << 8)) - (512 * (message.data[1] & 0x8))) / 2.
            if message.arbitration_id == 468:
                print("FrontDu Torque Meassured Nm: " + str(frontdutorquemeassured()))

            #ID 2E5 Front Du Power statistics
            def frontinverter12V():
                return message.data[0] / 10.
            def frontdudissipation():
                return message.data[1] * 125
            def frontdudrivepowermax():
                return (((message.data[6] & 0x3F) << 5) + ((message.data[5] & 0xF0) >> 3)) + 1
            def frontdumechpower():
                return ((message.data[2] + ((message.data[3] & 0x7) << 8)) - (512 * (message.data[3] & 0x4))) / 2.
            def frontdustatorcurrent():
                return message.data[4] + ((message.data[5] & 0x7) << 8)
            if message.arbitration_id == 741:
                print("FrontDu Inverter 12V V: " + str(frontinverter12V()))
                print("FrontDu Dissipation W: " + str(frontdudissipation()))
                print("FrontDu Driver power Max kW: " + str(frontdudrivepowermax()))
                print("FrontDu MechPower kW: " + str(frontdumechpower()))
                print("FrontDu Stator Current A: " + str(frontdustatorcurrent()))
            #ID 145
            def frontdutorqueestimate():
                return ((message.data[0] + ((message.data[1] & 0xf) << 8)) - (512 * (message.data[1] & 0x8))) / 2.
            if message.arbitration_id == 325:
                print("FrontDU Torque Estimate Nm: " + str(frontdutorqueestimate()))

        if SHOW_DCDC_DATA == True:
            #ID 210 DC DC statistics
            def inlettemperature():
                return ((message.data[2] - (2 * (message.data[2] & 0x80))) / 2) + 40
            def inputpower():
                return message.data[3] * 16
            def outputcurrent():
                return message.data[4]
            def outputpower():
                return message.data[4] * (message.data[5] / 10.)
            def outputvoltage():
                return message.data[5] / 10
            if message.arbitration_id == 528:
                print("Inlet Temperature C: " + str(inlettemperature()))
                print("Input Power W: " + str(inputpower()))
                print("Output Current A: " + str(outputcurrent()))
                print("Output Power W: " + str(outputpower()))
                print("Output Voltage V: " + str(outputvoltage()))



# Ctrl-C Keyboard exit.
except KeyboardInterrupt:
    # Catch keyboard interrupt
    os.system("sudo /sbin/ip link set can0 down")
    print('\n\rKeyboard interrtupt')

#End of script.


